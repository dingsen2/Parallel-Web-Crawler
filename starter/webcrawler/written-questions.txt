Written Questions

Q1. Run the web crawler using the configurations located at src/main/config/written_question_1a.json and
    src/main/config/written_question_1b.json. The only difference between these configurations is that one always uses
    the sequential crawler and the other always uses the parallel crawler. Inspect the profile output in
    profileData.txt.

    If you are using a multi-processor computer, you should notice that SequentialWebCrawler#crawl and
    ParallelWebCrawler#crawl took about the same amount of time, but PageParserImpl#parse took much longer when run with
    the ParallelWebCrawler.

    Why did the parser take more time when run with ParallelWebCrawler?

    My answer: The reason is that after being invoked, parser need to wait until all the recursive tasks to be submitted to start
    executing.


Q2. Your manager ran your crawler on her old personal computer, using the configurations from Q1, and she notices that
    the sequential crawler actually outperforms the parallel crawler. She would like to know why.

    (a) Suggest one reason why the sequential web crawler was able to read more web pages than the parallel crawler.
        (Hint: Try setting "parallelism" to 1 in the JSON configs to simulate your manager's computer.)

        Since her computer is old, it is likely that her computer does not have a multi-thread CPU. Therefore, the parallel
        version code cannot make full use of the parallelism. Meanwhile, the sequential crawler is better than the parallel
        crawler if there is only one thread.

    (b) Suggest one scenario in which the parallel web crawler will almost certainly perform better than the sequential
        crawler. Why will it perform better?

        When the computer allows more threads to be created and run in the same time. This could significantly
        improve the computing power and thus in this case the parallel web crawler will outperform the sequential one.

Q3. Analyze your method profiler through the lens of Aspect Oriented Programming, by answering the following questions:

    (a) What cross-cutting concern is being addressed by the com.udacity.webcrawler.profiler.Profiler class?

    The detailed profiling data.

    (b) What are the join points of the Profiler in the web crawler program?

    The join points are those methods with the "@Profiled" annotation.

Q4. Identify three (3) different design patterns used in this project, and explain which interfaces, classes, and/or
    libraries use or implement those design patterns.

    For each pattern, name one thing about the pattern that you LIKED, and one thing you DISLIKED. If you did not like
    anything, you can name two things you disliked.

    a. Singleton: User in ProfilerModule,
    Like: Singleton only allows one instance to be instantiated, which keep the coherence of the profiler object.
    Dislike: Bad for unit test.

    b. Builder: Used in CrawlerConfiguration.
    Like: Method chaining.
    Dislike: Long code.

    c. Abstract Factory: Used in PageParserFactory.
    Like: Hide implementation details from users.
    Dislike: More Java Class and thus more complexity.

